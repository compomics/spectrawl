/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.spectrawl.view.dialogs;

import com.compomics.util.experiment.biology.AminoAcid;
import java.awt.Toolkit;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author vaudel
 */
public class SequenceInputDialog extends javax.swing.JDialog {

    /**
     * The parent dialog
     */
    private FiltersSetupDialog filtersSetupDialog;
    /**
     * The sequences imported by the user
     */
    private ArrayList<String> sequences;
    /**
     * Creates new form SequenceInputDialog
     */
    public SequenceInputDialog(FiltersSetupDialog filtersSetupDialog) {
        super(filtersSetupDialog, true);
        this.filtersSetupDialog = filtersSetupDialog;
        initComponents();
        setVisible(true);
    }
    /**
     * The amino acids implemented in utilities
     */
    private ArrayList<String> aas = AminoAcid.getAminoAcids();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        peptidesTxt = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Type peptide sequences or load them from a text file:");

        peptidesTxt.setColumns(20);
        peptidesTxt.setRows(5);
        jScrollPane1.setViewportView(peptidesTxt);

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select text File");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);

        int returnVal = fileChooser.showDialog(this.getParent(), "Open");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            importFile(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String input = peptidesTxt.getText();
        sequences = new ArrayList<String>();
        for (String currentLine : input.split("\n")) {
                currentLine = currentLine.trim();
                currentLine = currentLine.toUpperCase();
                if (!currentLine.equals("")) {
                    for (String aa : currentLine.split("")) {
                        if (!aa.equals("") && !aas.contains(aa)) {
                            JOptionPane.showMessageDialog(this, "The following amino-acid is not recognized: " + aa, "Import Error.", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    sequences.add(currentLine);
                }
        }
        filtersSetupDialog.addSequences(sequences);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void importFile(File txtFile) {
        try {
            FileReader f = new FileReader(txtFile);
            BufferedReader b = new BufferedReader(f);
            String currentLine;
            sequences = new ArrayList<String>();
            while ((currentLine = b.readLine()) != null) {
                currentLine = currentLine.trim();
                if (!currentLine.equals("")) {
                    currentLine = currentLine.split(" ")[0];
                    currentLine = currentLine.split("\t")[0];
                currentLine = currentLine.toUpperCase();
                    for (String aa : currentLine.split("")) {
                        if (!aa.equals("") && !aas.contains(aa)) {
                            JOptionPane.showMessageDialog(this, "The following amino-acid is not recognized: " + aa, "Import Error.", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    sequences.add(currentLine);
                }
            }
            String txt = "";
            Collections.sort(sequences);
            for (String sequence : sequences) {
                txt += sequence + "\n";
            }
            peptidesTxt.setText(txt);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while loading the file.", "Import Error.", JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while loading the file.", "Import Error.", JOptionPane.ERROR_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea peptidesTxt;
    // End of variables declaration//GEN-END:variables
}
