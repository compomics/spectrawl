/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.spectrawl.gui;

import com.compomics.spectrawl.config.PropertiesConfigurationHolder;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author niels
 */
public class ExperimentLoaderPanel extends javax.swing.JPanel {

    private SpectrawlGui spectrawlGui;

    public enum ExperimentType {

        MsLims, Mgf
    }

    /**
     * Creates new form ExperimentLoaderPanel
     */
    public ExperimentLoaderPanel(SpectrawlGui spectrawlGui) {
        this.spectrawlGui = spectrawlGui;

        initPanel();
    }

    private void initPanel() {
        initComponents();

        //remove panels
        experimentSelectionPanel.remove(msLimsPanel);
        experimentSelectionPanel.remove(mgfPanel);

        //init bin configuration
        binFloorTextField.setText(PropertiesConfigurationHolder.getInstance().getString("BINS_FLOOR"));
        binCeilingTextField.setText(PropertiesConfigurationHolder.getInstance().getString("BINS_CEILING"));
        binSizeTextField.setText(PropertiesConfigurationHolder.getInstance().getString("BIN_SIZE"));

        //add items to combo box
        for (ExperimentType experimentType : ExperimentType.values()) {
            experimentTypeComboBox.addItem(experimentType);
        }
        experimentTypeComboBox.setSelectedIndex(-1);

        //add actionlisteners
        experimentTypeComboBox.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                ExperimentType selectedExperimentType = (ExperimentType) experimentTypeComboBox.getSelectedItem();
                switch (selectedExperimentType) {
                    case MsLims:
                        if (!isPresent(msLimsPanel, experimentSelectionPanel)) {
                            experimentSelectionPanel.add(msLimsPanel);
                        }
                        if (isPresent(mgfPanel, experimentSelectionPanel)) {
                            experimentSelectionPanel.remove(mgfPanel);
                        }
                        experimentSelectionPanel.revalidate();
                        break;
                    case Mgf:
                        if (!isPresent(mgfPanel, experimentSelectionPanel)) {
                            experimentSelectionPanel.add(mgfPanel);
                        }
                        if (isPresent(msLimsPanel, experimentSelectionPanel)) {
                            experimentSelectionPanel.remove(msLimsPanel);
                        }
                        experimentSelectionPanel.revalidate();
                        break;
                }
            }
        });

        fileChooseButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();

                //select only files
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

                //in response to the button click, show open dialog 
                int returnVal = fileChooser.showOpenDialog(ExperimentLoaderPanel.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File projectDirectory = fileChooser.getSelectedFile();
                    mgfFileTextField.setText(projectDirectory.getName());
                }
            }
        });
    }

    private boolean isPresent(Component component, JPanel panel) {
        boolean isPresent = Boolean.FALSE;

        for (Component presentComponent : panel.getComponents()) {
            if (component.equals(presentComponent)) {
                isPresent = Boolean.TRUE;
            }
        }

        return isPresent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        experimentSelectionPanel = new javax.swing.JPanel();
        experimentTypeComboBox = new javax.swing.JComboBox();
        msLimsPanel = new javax.swing.JPanel();
        experimentIdLabel = new javax.swing.JLabel();
        msLimsExperimentIdTextField = new javax.swing.JTextField();
        mgfPanel = new javax.swing.JPanel();
        mgfFileLabel = new javax.swing.JLabel();
        mgfFileTextField = new javax.swing.JTextField();
        fileChooseButton = new javax.swing.JButton();
        binConfigurationPanel = new javax.swing.JPanel();
        binFloorLabel = new javax.swing.JLabel();
        binFloorTextField = new javax.swing.JTextField();
        binCeilingLabel = new javax.swing.JLabel();
        binCeilingTextField = new javax.swing.JTextField();
        binSizeLabel = new javax.swing.JLabel();
        binSizeTextField = new javax.swing.JTextField();
        experimentButtonPanel = new javax.swing.JPanel();
        loadExperimentButton = new javax.swing.JButton();
        progressBarPanel = new javax.swing.JPanel();
        progressBarLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setLayout(new java.awt.GridBagLayout());

        experimentSelectionPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        experimentSelectionPanel.add(experimentTypeComboBox);

        msLimsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        experimentIdLabel.setText("MSLims experiment ID");
        msLimsPanel.add(experimentIdLabel);

        msLimsExperimentIdTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        msLimsPanel.add(msLimsExperimentIdTextField);

        experimentSelectionPanel.add(msLimsPanel);

        mgfPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        mgfFileLabel.setText("MGF file");
        mgfPanel.add(mgfFileLabel);

        mgfFileTextField.setEnabled(false);
        mgfFileTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        mgfPanel.add(mgfFileTextField);

        fileChooseButton.setText("choose file");
        mgfPanel.add(fileChooseButton);

        experimentSelectionPanel.add(mgfPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        add(experimentSelectionPanel, gridBagConstraints);

        java.awt.GridBagLayout binConfigurationPanelLayout = new java.awt.GridBagLayout();
        binConfigurationPanelLayout.columnWidths = new int[] {0, 5, 0};
        binConfigurationPanelLayout.rowHeights = new int[] {0, 10, 0, 10, 0};
        binConfigurationPanel.setLayout(binConfigurationPanelLayout);

        binFloorLabel.setText("bin floor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        binConfigurationPanel.add(binFloorLabel, gridBagConstraints);

        binFloorTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        binConfigurationPanel.add(binFloorTextField, gridBagConstraints);

        binCeilingLabel.setText("bin ceiling");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        binConfigurationPanel.add(binCeilingLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        binConfigurationPanel.add(binCeilingTextField, gridBagConstraints);

        binSizeLabel.setText("bin size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        binConfigurationPanel.add(binSizeLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        binConfigurationPanel.add(binSizeTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        add(binConfigurationPanel, gridBagConstraints);

        loadExperimentButton.setText("load");

        javax.swing.GroupLayout experimentButtonPanelLayout = new javax.swing.GroupLayout(experimentButtonPanel);
        experimentButtonPanel.setLayout(experimentButtonPanelLayout);
        experimentButtonPanelLayout.setHorizontalGroup(
            experimentButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, experimentButtonPanelLayout.createSequentialGroup()
                .addGap(0, 211, Short.MAX_VALUE)
                .addComponent(loadExperimentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        experimentButtonPanelLayout.setVerticalGroup(
            experimentButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, experimentButtonPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(loadExperimentButton))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE;
        add(experimentButtonPanel, gridBagConstraints);

        progressBarPanel.setLayout(new java.awt.GridLayout(2, 0));
        progressBarPanel.add(progressBarLabel);
        progressBarPanel.add(jProgressBar1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        add(progressBarPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(filler1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel binCeilingLabel;
    private javax.swing.JTextField binCeilingTextField;
    private javax.swing.JPanel binConfigurationPanel;
    private javax.swing.JLabel binFloorLabel;
    private javax.swing.JTextField binFloorTextField;
    private javax.swing.JLabel binSizeLabel;
    private javax.swing.JTextField binSizeTextField;
    private javax.swing.JPanel experimentButtonPanel;
    private javax.swing.JLabel experimentIdLabel;
    private javax.swing.JPanel experimentSelectionPanel;
    private javax.swing.JComboBox experimentTypeComboBox;
    private javax.swing.JButton fileChooseButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton loadExperimentButton;
    private javax.swing.JLabel mgfFileLabel;
    private javax.swing.JTextField mgfFileTextField;
    private javax.swing.JPanel mgfPanel;
    private javax.swing.JTextField msLimsExperimentIdTextField;
    private javax.swing.JPanel msLimsPanel;
    private javax.swing.JLabel progressBarLabel;
    private javax.swing.JPanel progressBarPanel;
    // End of variables declaration//GEN-END:variables
}
